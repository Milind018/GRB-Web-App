import streamlit as st
import subprocess
import pandas as pd
import os
from PIL import Image

def run_r_script(script_name, input_file, output_file=None, apply_mice=None, upsampling=None, m_estimator=None, custom_models=None, m_est_weight=None, n_loops = None,
                 correlation_cutoff=None, RMSE_cutoff=None, supmodel=None, glmb=None):
    """
    Run an R script with optional arguments for output file,
    and additional optional arguments for applying MICE, m_estimator and removing catastrophic outliers.
    """
    command = ["Rscript", script_name, input_file]
    
    if output_file is not None:
        command.append(output_file)
    
    if apply_mice is not None:
        command.append(str(apply_mice))

    if upsampling is not None:
        command.append(str(upsampling))

    if m_estimator is not None:
        command.append(str(m_estimator))

    if custom_models is not None:
        command.append(str(custom_models))

    if m_est_weight is not None:
        command.append(str(m_est_weight))

    if n_loops is not None:
        command.append(str(n_loops))

    if correlation_cutoff is not None:
        command.append(str(correlation_cutoff))

    if RMSE_cutoff is not None:
        command.append(str(RMSE_cutoff))

    subprocess.run(command, check=True)


def clean_up(*file_paths):
    """Delete temporary files."""
    for file_path in file_paths:
        if os.path.exists(file_path):
            os.remove(file_path)

# Sidebar for task selection
#IF YOU'RE IMPLEMENTING A NEW TASK, ADD IT IN THE FOLLOWING LIST BEFORE OTHER TASK
task = st.sidebar.radio(
    "Choose a task:",
    ("**Redshift Estimator**","**Data Visualisation**", "**GAM/GLM Formula Generator**", "**Superlearner**", "**Model Comparison**", "**Relative Importance**", "**Other task**", "**Documentation**")
)

st.title(task)

# Redshift Estimator
if task == "**Redshift Estimator**":
    st.write("**Please enter the generalization data.**")
    # Option to choose between file upload and manual input
    option = st.radio("**Choose your input method:**", ('**Upload a file**', '**Enter parameters manually**'))
    apply_mice = st.checkbox("**Apply MICE**")
    supmodel = st.checkbox("**Do you already have modelled data?**")
    if option == '**Upload a file**':
        uploaded_file = st.file_uploader("**Choose a file (.csv or .txt)**", type=['csv', 'txt'])
        process_file = st.button("**Submit**")

        if uploaded_file is not None and process_file:
            # Save the uploaded file to a temporary file
            temp_input_file = "temp_input_file.csv"
            with open(temp_input_file, "wb") as f:
                f.write(uploaded_file.getbuffer())

            output_text_file = "output.txt"  # Name of the output file from R script
            # Run the R script
            run_r_script("redshift_estimator.R", temp_input_file, output_text_file, str(apply_mice), str(supmodel))

            # Display output text and provide a download link
            if os.path.exists(output_text_file):
                # # Display output text
                # with open(output_text_file, "r") as f:
                #     st.text(f.read())

                # Display output as a table
                if os.path.exists(output_text_file):
                    # Read the output CSV file into a DataFrame
                    output_df = pd.read_csv(output_text_file)
                    # Modify column names as needed
                    new_column_names = {
                         'GRBID': 'GRB ID',
                         'InvZphot': 'Inverse Redshift(Z) photon',
                         'pred_max': 'Predicted Maximum',
                         'pred_min': 'Predicted Minimum',
                         'Zphot': 'Redshift(Z) photon'
                        # Add more mappings as needed
                         }

                            # Rename columns in the DataFrame
                    output_df.rename(columns=new_column_names, inplace=True)
                    # Display the DataFrame as a table
                    st.table(output_df)

            clean_up(temp_input_file, output_text_file)
            plot_names = ["Box plot for each GRB with error bars shown for each prediction",
                                       "Histogram comparing Distributions of Training Set and the logarithm(Base 10) of the Redshift Predictions", 
                                       "Histogram comparing Distributions of Training Set and the Redshift Predictions"]
            # Display plots generated by R script
            plot_dir = "Plot_Output"
            redshift_plots = [ "boxplot.png", "log10z_histogram.png", "z_histogram.png"]
            redshift_plots = [os.path.join(plot_dir, plot_name) for plot_name in redshift_plots]
            for i, plot_file in enumerate(redshift_plots):
                if os.path.exists(plot_file):
                    image = Image.open(plot_file)
                    st.image(image, caption=plot_names[i])
                    #os.remove(plot_file)  # Clean up the plot file after displaying it

    else:
        # Layout with rows and columns for manual input
        row1 = st.columns(4)
        row2 = st.columns(4)
        row3 = st.columns(4)
        row4 = st.columns(4)

        with row1[0]: GRBID = st.text_input("GRBID", max_chars=20)
        with row1[1]: Fbest = st.text_input("Fbest", max_chars=20)
        with row1[2]: T_abest = st.text_input("T_abest", max_chars=20)
        with row1[3]: F_min = st.text_input("F_min", max_chars=20)

        with row2[0]: F_max = st.text_input("F_max", max_chars=20)
        with row2[1]: T_amin = st.text_input("T_amin", max_chars=20)
        with row2[2]: T_amax = st.text_input("T_amax", max_chars=20)
        with row2[3]: logT90 = st.text_input("logT90", max_chars=20)

        with row3[0]: logPeakFlux = st.text_input("logPeakFlux", max_chars=20)
        with row3[1]: errorlogPeakFlux = st.text_input("errorlogPeakFlux", max_chars=20)
        with row3[2]: photon_index = st.text_input("photon_index", max_chars=20)
        with row3[3]: errorphotonindex = st.text_input("errorphotonindex", max_chars=20)

        with row4[0]: logNH = st.text_input("logNH", max_chars=20)
        with row4[1]: T90_err = st.text_input("T90_err", max_chars=20)

        submit_params = st.button("Submit")
        if submit_params:
            # Combine the input data into a format suitable for processing
            data = {
                "GRBID": GRBID,
                "Fbest": Fbest,
                "T_abest": T_abest,
                "F_min": F_min,
                "F_max": F_max,
                "T_amin": T_amin,
                "T_amax": T_amax,
                "logT90": logT90,
                "logPeakFlux": logPeakFlux,
                "errorlogPeakFlux": errorlogPeakFlux,
                "photon_index": photon_index,
                "errorphotonindex": errorphotonindex,
                "logNH": logNH,
                "T90_err": T90_err
            }
            df = pd.DataFrame([data])
            temp_input_file = "temp_input_for_manual.txt"
            output_text_file = "output_manual.txt"  # Output file for manual input

            # Save the dataframe to a temporary text file and run the R script
            #df.to_csv(temp_input_file, index=False)
            df.to_csv(temp_input_file, index=False, sep='\t')
            #run_r_script("redshift_estimator.R", temp_input_file, output_text_file, str(apply_mice))
            run_r_script("Generalization_Aditya_v2.R", temp_input_file, output_text_file, str(apply_mice))

            # Display output text (no download link or plots for manual input)
            if os.path.exists(output_text_file):
                # Read the output CSV file into a DataFrame
                output_df = pd.read_csv(output_text_file)
                # Modify column names as needed
                new_column_names = {
                         'GRBID': 'GRB ID',
                         'InvZphot': 'Inverse Redshift(Z) photon',
                         'pred_max': 'Predicted Maximum',
                         'pred_min': 'Predicted Minimum',
                         'Zphot': 'Redshift(Z) photon'
                        # Add more mappings as needed
                         }
                            # Rename columns in the DataFrame
                output_df.rename(columns=new_column_names, inplace=True)
                # Display the DataFrame as a table
                st.table(output_df)

            clean_up(temp_input_file, output_text_file)                
            # Cleanup plots generated by R script
            plot_names= ["Box plot for each GRB with error bars shown for each prediction", 
                                       "Histogram comparing Distributions of Training Set and the logarithm(Base 10) of the Redshift Predictions", 
                                       "Histogram comparing Distributions of Training Set and the Redshift Predictions"]
            # Display plots generated by R script
            for i, plot_file in enumerate(["boxplot.png", "log10z_histogram.png", "z_histogram.png"]):
                if os.path.exists(plot_file):
                    image = Image.open(plot_file)
                    st.image(image, caption=plot_names[i])
                    #os.remove(plot_file)  # Clean up the plot file after displaying it

#Data Visualisation
elif task == "**Data Visualisation**":
    st.write("**Please upload training data**")
    
    sl_row1 = st.columns(2)
    #apply_mice = st.checkbox("Apply MICE")
    with sl_row1[0]: Scatter = st.checkbox("**Scatter Matrix**")
    with sl_row1[1]: Mice = st.checkbox("**Mice Missing Features**")
    # File upload for MICE
    uploaded_file = st.file_uploader("**Choose a file (.csv or .txt)**", type=['csv', 'txt'])
    process_file = st.button("**Submit**")

    if uploaded_file is not None and process_file:
        
        # Save the uploaded file to a temporary file

        #output_file = "output_superlearner.txt"  # Output file name
        # Run the (yet to be created) R script for Superlearner
        #run_r_script("new_standalone_superlearner.R", temp_input_file, apply_mice=str(apply_mice), m_estimator=str(m_estimator), custom_models=str(custom_models), m_est_weight=m_est_weight)
        # Display output as a table
        # if os.path.exists(output_file):
        #     output_df = pd.read_csv(output_file)
        #     st.table(output_df)

         #, output_file)

        plot_dir = "Plot_Output"
        mice_plots=[]
        if Scatter == True and  Mice == True:
            temp_input_file = "training_data.csv"
            with open(temp_input_file, "wb") as f:
                f.write(uploaded_file.getbuffer())
            run_r_script("Data_Visualisation.R", temp_input_file)
            run_r_script("MICE.R", temp_input_file)
            mice_plots = ['MICE_missing_features.png','NewScatterPlot.png']
            mice_plots = [os.path.join(plot_dir, plot_name) for plot_name in mice_plots]
            clean_up(temp_input_file)
            plot_names=["Features Missing in MICE", "Scatter matrix"]
        elif Scatter == True:
            temp_input_file = "training_data.csv"
            with open(temp_input_file, "wb") as f:
                f.write(uploaded_file.getbuffer())
            run_r_script("Data_Visualisation.R", temp_input_file)
            mice_plots = ['NewScatterPlot.png']
            mice_plots = [os.path.join(plot_dir, plot_name) for plot_name in mice_plots]
            clean_up(temp_input_file)
            plot_names=["Scatter matrix"]
        elif Mice == True:
            temp_input_file = "training_data.csv"
            with open(temp_input_file, "wb") as f:
                f.write(uploaded_file.getbuffer())
            run_r_script("MICE.R", temp_input_file)
            mice_plots = ['MICE_missing_features.png']
            mice_plots = [os.path.join(plot_dir, plot_name) for plot_name in mice_plots]
            clean_up(temp_input_file)
            plot_names=["Features Missing in MICE"]


        for i, plot_file in enumerate(mice_plots):
            if os.path.exists(plot_file):
                image = Image.open(plot_file)
                st.image(image, caption=plot_names[i])
                #os.remove(plot_file)  # Clean up the plot file after displaying it

                    


# Superlearner
elif task == "**Superlearner**":
    st.write("**Please upload training data**")
    # TODO: Add code for Superlearner here
    sl_row1 = st.columns(2)
    sl_row2 = st.columns(2)
    sl_row3 = st.columns(2)
    sl_row4 = st.columns(2)
    #apply_mice = st.checkbox("Apply MICE")
    with sl_row1[0]: apply_mice = st.checkbox("**Apply MICE**")
    with sl_row1[1]: remove_catout = st.checkbox("**Remove Catastrophic Outliers**")
    with sl_row2[0]: upsampling = st.checkbox("**Apply Upsampling**")
    with sl_row3[0]: m_estimator = st.checkbox("**Apply M Estimator**")
    m_est_weight = 0.5
    if m_estimator:
        with sl_row3[1]: m_est_weight = st.text_input("**Custom Weight Threshold**", value = 0.5, max_chars=20)
    with sl_row4[0]: custom_models = st.checkbox("**Custom Models**")
    # List of 16 models
    models = [
        'gam', 'custom_glm', 'SL.caret.rpart', 'SL.earth',
        'SL.ipredbagg', 'SL.loess', 'SL.mean', 'SL.nnet',
        'SL.randomForest', 'SL.ranger', 'SL.rpart', 'SL.step',
        'SL.step.forward', 'SL.step.interaction', 'SL.stepAIC', 'SL.xgboost'
    ]
    # Dictionary to store the state of each checkbox
    selected_models = {}
    if custom_models:
        for i in range(0, len(models), 4):
            row = st.columns(4)
            for j in range(4):
                lib = models[i + j]
                with row[j]:
                    selected_models[lib] = st.checkbox(lib)

                    # File upload for Superlearner
    uploaded_file = st.file_uploader("**Choose a file (.csv or .txt)**", type=['csv', 'txt'])
    process_file = st.button("**Submit**")

    if uploaded_file is not None and process_file:
        if custom_models:
            chosen_models = []
            for model, selected in selected_models.items():
                if selected:
                    if model == 'gam':
                        chosen_models.extend(['gam_1', 'gam_2', 'gam_3'])
                        continue  # Skip adding 'gam' to the list
                    elif model == 'custom_glm':
                        chosen_models.extend(['SL.custom_glm_1', 'SL.custom_glm_2', 'SL.custom_glm_3'])
                        continue  # Skip adding 'custom_glm' to the list
                    chosen_models.append(model)

            # Write the selected models to a file
            with open('selected_models.txt', 'w') as file:
                file.write('libs = c(' + ', '.join(f"'{lib}'" for lib in chosen_models) + ')\n')

        # Save the uploaded file to a temporary file
        temp_input_file = "training_data.csv"
        with open(temp_input_file, "wb") as f:
            f.write(uploaded_file.getbuffer())

        # output_file = "output_superlearner.txt"  # Output file name
        # Run the (yet to be created) R script for Superlearner
        #run_r_script("new_standalone_superlearner.R", temp_input_file, apply_mice=str(apply_mice), m_estimator=str(m_estimator), custom_models=str(custom_models), m_est_weight=m_est_weight)
        run_r_script("superlearner.R", temp_input_file, apply_mice=str(apply_mice), upsampling=str(upsampling), m_estimator=str(m_estimator), custom_models=str(custom_models), m_est_weight=m_est_weight, n_loops=100)

        # Display output as a table
        # if os.path.exists(output_file):
        #     output_df = pd.read_csv(output_file)
        #     st.table(output_df)

        clean_up(temp_input_file)  # , output_file)
        plot_dir = "Plot_Output"
        superlearner_plots = [os.path.join(plot_dir, filename) for filename in os.listdir(plot_dir) if
                              filename.endswith(".png")]

        for i, plot_file in enumerate(superlearner_plots):

            if os.path.exists(plot_file):
                image = Image.open(plot_file)
                st.image(image)
                #os.remove(plot_file)  # Clean up the plot file after displaying it


# Compare Models
elif task == "**Model Comparison**":
    st.write("**Please upload training data**")
    apply_mice = st.checkbox("**Apply MICE**")
    n_loops = st.slider("**Choose number of loops**", 1, 50, value=10)  # 15 is the default value 
    st.write("**Available Models for Comparison**")    
     # List of 16 models
    models = [
        'gam', 'custom_glm', 'SL.caret.rpart', 'SL.earth', 
        'SL.ipredbagg', 'SL.loess', 'SL.mean', 'SL.nnet',
        'SL.randomForest', 'SL.ranger', 'SL.rpart',  'SL.step', 
        'SL.step.forward', 'SL.step.interaction', 'SL.stepAIC', 'SL.xgboost'
    ]
    # Dictionary to store the state of each checkbox
    selected_models = {}
    for i in range(0, len(models), 4):
        row = st.columns(4)
        for j in range(4):
            lib = models[i + j]
            with row[j]:
                selected_models[lib] = st.checkbox(lib)
    

    # File upload for Model Selection
    uploaded_file = st.file_uploader("**Choose a file (.csv or .txt)**", type=['csv', 'txt'])
    process_file = st.button("**Submit**")

    if uploaded_file is not None and process_file:
        # Save the uploaded file to a temporary file
        temp_input_file = "training_data.csv"
        with open(temp_input_file, "wb") as f:
            f.write(uploaded_file.getbuffer())

        chosen_models = []
        for model, selected in selected_models.items():
            if selected:
                    if model == 'gam':
                        chosen_models.extend(['gam_1', 'gam_2', 'gam_3'])
                        continue  # Skip adding 'gam' to the list
                    elif model == 'custom_glm':
                        chosen_models.extend(['SL.custom_glm_1', 'SL.custom_glm_2', 'SL.custom_glm_3'])
                        continue  # Skip adding 'custom_glm' to the list
                    chosen_models.append(model)

            # Write the selected models to a file
            with open('selected_models.txt', 'w') as file:
                file.write('libs = c(' + ', '.join(f"'{lib}'" for lib in chosen_models) + ')\n')       

        #output_file = "output_superlearner.txt"  # Output file name
        # Run the (yet to be created) R script for Superlearner
        run_r_script("superlearner.R", temp_input_file, apply_mice=str(apply_mice), m_estimator='false', custom_models='true', m_est_weight=0.5, n_loops=n_loops)
        #run_r_script("superlearner_extended.R", temp_input_file, apply_mice=str(apply_mice), n_loops=n_loops)

        clean_up(temp_input_file) #, output_file)
        plot_dir = "Plot_Output"
        superlearner_plots = [ 'model_compare_plot.png']
        superlearner_plots = [os.path.join(plot_dir, plot_name) for plot_name in superlearner_plots]
        plot_names=["Correlation Factors for Different Models"]    
        for i, plot_file in enumerate(superlearner_plots):
            if os.path.exists(plot_file):
                image = Image.open(plot_file)
                st.image(image, caption=plot_names[i])
                #os.remove(plot_file)  # Clean up the plot file after displaying it


# Get New Formulas
elif task == "**GAM/GLM Formula Generator**":
    st.write("**Input: GRBs with redshift\n Output: GAM / GLM formulas and relavent plots.**")
    # TODO: Add code for other_tast here
    correlation_cutoff = st.slider("**Choose correlation quantile cut-off**", 95.0, 100.0, value=97.5, step=0.1)  # 3 is the default value 
    RMSE_cutoff = st.slider("**Choose RMSE quantile cut-off**", 0.0, 5.0, value=2.5, step=0.1)  # 3 is the default value
    glmb = st.checkbox("**Use GLM**")
    uploaded_file = st.file_uploader("**Choose a file (.csv or .txt)**", type=['csv', 'txt'])
    process_file = st.button("**Submit**")
    
    if uploaded_file is not None and process_file:
        # Save the uploaded file to a temporary file
        temp_input_file = "training_data.csv"
        with open(temp_input_file, "wb") as f:
            f.write(uploaded_file.getbuffer())

        output_file2 = "Best_formula.txt"  # Output file name
        # Run the R Script
        run_r_script("Formula_Search_Aditya_v2.R", temp_input_file, output_file2, str(glmb), correlation_cutoff=correlation_cutoff/100, RMSE_cutoff=RMSE_cutoff/100 )
        with open('Best_formula.txt', 'r') as file1, open('test_formula.txt', 'w') as file2:
            file2.write("\"Formulae\"\n")
            for line in file1:
                file2.write(line[4:])

        output_file = "test_formula.txt"  # Output file name        
        # Display output as a table
        if os.path.exists(output_file):
            output_df = pd.read_csv(output_file)
            output_df = output_df.set_index(pd.Index([''] * len(output_df)))

            output_df['Formulae'] = output_df['Formulae'].str.replace('Response ~', '')
            output_df.insert(0, '', ['Best Correlation', 'Best Root Mean Squared Error (RMSE)', 'Best Median Absolute Deviation(MAD)'])
            st.table(output_df)
        
        clean_up(temp_input_file, output_file, output_file2)
        plot_dir = "Plot_Output"
        formula_search_plots = [ 'Corr_RMSE_compare.png', 'Testset_compare.png']
        formula_search_plots = [os.path.join(plot_dir, plot_name) for plot_name in formula_search_plots]

        plot_names=["Correlation vs RMSE plot for all the fomulae", "Correlation and RMSE plot for the selected formulae on the test set"]    
        for i, plot_file in enumerate(formula_search_plots):
            if os.path.exists(plot_file):
                image = Image.open(plot_file)
                st.image(image, caption=plot_names[i])
                #os.remove(plot_file)  # Clean up the plot file after displaying it


# Other task
#IF YOU'RE IMPLEMENTING A NEW FUNCTION, MAKE A COPY OF THE FOLLOWING BLOCK AND EDIT IT
elif task == "**Other task**":
    st.write("**Work in progress**")
    # TODO: Add code for other_tast here
    # File upload for other_task

    uploaded_file = st.file_uploader("**Choose a file (.csv or .txt)**", type=['csv', 'txt'])
    process_file = st.button("**Submit**")
    
    if uploaded_file is not None and process_file:
        # Save the uploaded file to a temporary file
        temp_input_file = "temp_input_file_other.csv"
        with open(temp_input_file, "wb") as f:
            f.write(uploaded_file.getbuffer())

        output_file = "output_other.txt"  # Output file name
        # Run the R Script
        run_r_script("placeholder_other.R", temp_input_file, output_file)

        # Display output as a table
        if os.path.exists(output_file):
            output_df = pd.read_csv(output_file)
            st.table(output_df)
        
        clean_up(temp_input_file, output_file)

# Relative Importance
elif task == "**Relative Importance**":
    st.write("**Please upload training data**")
    
    # File upload for Relative Importance 
    uploaded_file = st.file_uploader("**Choose a file (.csv or .txt)**", type=['csv', 'txt'])
    process_file = st.button("**Submit**")

    if uploaded_file is not None and process_file:
        # Save the uploaded file to a temporary file
        temp_input_file = "training_data.csv"
        with open(temp_input_file, "wb") as f:
            f.write(uploaded_file.getbuffer())

        #output_file = "output_superlearner.txt"  # Output file name
        # Run the (yet to be created) R script for Superlearner
        run_r_script("Influence_Calculation.R", temp_input_file )


        clean_up(temp_input_file) #, output_file)
        plot_dir = "Plot_Output"
        Importance_plots = [ 'Relinf_SelectiveVariables_without_catOutl_RelImp.png']
        Importance_plots = [os.path.join(plot_dir, plot_name) for plot_name in Importance_plots]
        
        plot_names=['Plot of Relative Importance']           
        for i, plot_file in enumerate(Importance_plots):
                if os.path.exists(plot_file):
                   image = Image.open(plot_file)
                   st.image(image, caption=plot_names[i])
                   #os.remove(plot_file)  # Clean up the plot file after displaying it

## How to run the app locally
elif task =="**Documentation**":
    st.title("**How to Run the App Locally**")
    task1 = st.radio(
    "**Choose your Operating System:**",
    ("Windows", "Mac", "Linux"))
    if task1 == "Windows":

     st.title("Python and VS Code Installation Guide")
     st.header("1. Installing Python:")
     st.markdown("""
     a. Download the latest version of Python from [Python Downloads](https://www.python.org/downloads/).
    
     b. Run the installer, ensuring that you check the option to add Python to the system PATH during installation.
    
     c. Verify the installation by opening a command prompt and typing:
       ```bash
       python --version
       ```

     """)
    
     st.header("2. Installing Visual Studio Code (VS Code):")
     st.markdown("""
     a. Download and install Visual Studio Code from [Visual Studio Code](https://code.visualstudio.com/).
    
     b. Open VS Code and install the "Python" extension by Microsoft for Python development.
     """)

     st.header("3. Setting Up Python in VS Code:")
     st.markdown("""
     a. Open VS Code.
    
     b. Install the "Python" extension by Microsoft.
    
     c. Create a new Python file with a `.py` extension.
    
     d. Select the Python interpreter by clicking on the interpreter version displayed in the bottom-right corner.
     """)

     st.header("4. Installing Python Libraries:")
     st.markdown("""
     a. Open the integrated terminal in VS Code (View > Terminal).
    
     b. Install libraries using the following commands:
        ```bash
        pip install streamlit
        pip install numpy
        pip install pandas
        ```
     """)

     st.header("5. Adding Python Path to Environment Variables:")
     st.markdown("""
     a. Find the Python installation path (usually in `C:\\Users\\<username>\\AppData\\Local\\Programs\\Python\\Python<version>`).
    
     b. Copy the path.
    
     c. Open the System Properties window:
        - Right-click on "This PC" or "Computer" and select "Properties."
        - Click on "Advanced system settings."
        - Click on the "Environment Variables" button.
    
     d. In the "System Variables" section, select the "Path" variable and click "Edit."
    
     e. Click "New" and paste the Python installation path.
    
     f. Click "OK" to save the changes.
     """)

     st.header("6. Verification:")
     st.markdown("""
     a. Open a new command prompt and type:
        ```bash
        python --version
        ```

     b. Ensure that the installed libraries are accessible:
       ```bash
          pip show streamlit
        pip show numpy
        pip show pandas
        ```
     """)
     st.title("R and RStudio Installation Guide")

     # 1. Install R
     st.subheader("1. Install R")
     st.write("Please follow the instructions below to install R on Windows:")
    
     # Display instructions
     st.markdown("- Visit the [R website](https://cran.r-project.org/mirrors.html) to download the latest version of R for Windows.")
     st.markdown("- Run the installer and complete the installation by accepting the default settings.")

     # Check R version
     st.markdown("Once the installation is complete, open the R console and check the version using the following command:")
     st.code("version")

     # 2. Install RStudio
     st.subheader("2. Install RStudio")
     st.write("Follow the steps below to install RStudio on Windows:")

     # Display instructions
     st.markdown("- Visit the [RStudio website](https://www.rstudio.com/products/rstudio/download/) to download the latest version of RStudio Desktop.")
     st.markdown("- Run the RStudio installer and complete the installation by accepting the default settings.")

     # 3. Set Up R and RStudio
     st.subheader("3. Set Up R and RStudio")
     st.write("Perform the following steps to set up R and RStudio:")

     # Display instructions
     st.markdown("- Launch RStudio.")
     st.code("version")
     st.markdown("- Check the R version in the RStudio console.")
     st.markdown("- Optionally, install additional R packages using the `install.packages()` function.")

     # 4. Add R Path to Environment Variables
     st.subheader("4. Add R Path to Environment Variables")
     st.write("Add the R executable path to the system environment variables on Windows.")

     # Display instructions
     st.markdown("1. Right-click on 'This PC' or 'Computer' on your desktop or in File Explorer.")
     st.markdown("2. Select 'Properties' and click on 'Advanced system settings.'")
     st.markdown("3. In the System Properties window, click on the 'Environment Variables' button.")
     st.markdown("4. In the Environment Variables window, under the 'System variables' section, find and select the 'Path' variable, then click on 'Edit.'")
     st.markdown("5. Click 'New' and add the path to the 'bin' directory of your R installation (e.g., `C:\\Program Files\\R\\R-x.x.x\\bin`).")
     st.markdown("6. Click 'OK' to close each window.")
     st.header("6. Verification:")
     st.markdown("""
      a. Open a new command prompt and type:
         ```bash
         R --version
         ```""")
     st.title("GRB_RSE_webapp")

     # Step 1: Download Code
     st.header("Step 1: Download Code")
     st.write("Visit the GitHub repository: [https://github.com/oelsherif/GRB_RSE_webapp](https://github.com/oelsherif/GRB_RSE_webapp).")
     st.write("Click on the 'Code' button and download the ZIP file.")
     st.write("Unzip the downloaded file to your desired location.")

     # Step 2: Open R Studio
     st.header("Step 2: Open R Studio")
     st.write("Open R Studio.")
     st.write("Create a new R Project by going to `File -> New Project -> Existing Directory` and selecting the directory where you unzipped the code.")

     # Step 3: Load Imports
     st.header("Step 3: Load Imports")
     st.write("In R Studio, open the file `Load_Imports.R` located in the project directory.")
     st.write("Save and run the script.")

     # Step 4: Configure Standalone Superlearner
     st.header("Step 4: Configure Standalone Superlearner")
     st.write("Open `new_standalone_superlearner.R`.")
     st.write("Change the `run_locally` variable to `TRUE`.")
     st.write("Save and run the script.")

     # Step 5: Run Result Plot Maker
     st.header("Step 5: Run Result Plot Maker")
     st.write("Open `Result_plot_maker.R`.")
     st.write("Save and run the script.")

     # Step 6: Configure Redshift Estimator
     st.header("Step 6: Configure Redshift Estimator")
     st.write("Open `redshift_estimator.R`.")
     st.write("Change the `run_locally` variable to `TRUE`.")
     st.write("Save and run the script.")

     # Step 7: Reset Configurations
     st.header("Step 7: Reset Configurations")
     st.write("Go back to `new_standalone_superlearner.R` and `redshift_estimator.R`.")
     st.write("Change the `run_locally` variables to `FALSE`.")
     st.write("Save both scripts.")

     # Step 8: Open VS Code
     st.header("Step 8: Open VS Code")
     st.write("Open Visual Studio Code.")

     # Step 9: Run Web Application
     st.header("Step 9: Run Web Application")
     st.write("Open the `app.py` file located in the project directory using VS Code.")
     st.write("In the terminal, navigate to the directory where you saved the unzipped files using the `cd` command.")
     st.write("Run the Streamlit app by typing `streamlit run app.py` in the terminal.")

     # Step 10: Access the Web App
     st.header("Step 10: Access the Web App")
     st.write("Once the app is running, open your web browser and navigate to the provided local address (usually `http://localhost:8501`).")
     st.write("Now you should have the GRB_RSE_webapp running locally on your machine. Feel free to explore the functionalities provided by the application in your web browser. ")
    if task1 == "Mac":
     
     st.title("Python and VS Code Installation Guide")
     st.header("Install Python on Mac")
     st.markdown("""
     1. Open a web browser and navigate to the official Python website: [Python Downloads](https://www.python.org/downloads/).
     2. Download the latest version of Python for macOS.
     3. Run the installer, ensuring that you check the option to add Python to the system PATH during installation.
     4. Open a terminal and verify the installation by typing:
        ```bash
        python3 --version
        ```
     """)
 
     st.header("Install Visual Studio Code on Mac")
     st.markdown("""
     1. Download and install Visual Studio Code from the official website: [Visual Studio Code](https://code.visualstudio.com/).
     2. Open VS Code and install the "Python" extension by Microsoft for Python development.
     """)

     st.header("Setting Up Python in VS Code on Mac")
     st.markdown("""
     1. Open VS Code.
     2. Install the "Python" extension by Microsoft.
     3. Create a new Python file with a `.py` extension.
     4. Select the Python interpreter by clicking on the interpreter version displayed in the bottom-right corner.
     """)

     st.header("Install Python Libraries on Mac")
     st.markdown("""
     1. Open the terminal in VS Code (View > Terminal).
     2. Install libraries using the following commands:
        ```bash
        pip3 install streamlit
        pip3 install numpy
        pip3 install pandas
        ```
     """)

     st.header("Add Python Path to Environment Variables on Mac")
     st.markdown("""
     1. Open the terminal.
     2. Type the following command to open the shell configuration file in a text editor (e.g., nano):
        ```bash
        nano ~/.zshrc
        ```
        Note: If you are using Bash, the file is `~/.bash_profile`.
     3. Add the following line to the file, replacing `/path/to/python` with the actual path:
        ```bash
        export PATH="/path/to/python:$PATH"
        ```
     4. Save and exit the text editor.
     5. In the terminal, type the following to apply the changes:
        ```bash
        source ~/.zshrc
        ```
        Or for Bash:
        ```bash
        source ~/.bash_profile
        ```
     """)


     # Function to install R and RStudio
     st.header("Install R and RStudio")
     st.title("R and RStudio Installation Guide")

     # Install R and RStudio
     st.markdown("## Install R and RStudio")
     installation_steps = [
        "1. **Download R:**\n   - Visit [R Project Mirrors](https://cran.r-project.org/mirrors.html).",
        "2. **Install R:**\n   - Locate the downloaded `.pkg` file and double-click to install.",
        "3. **Download RStudio:**\n   - Visit [RStudio Download](https://www.rstudio.com/products/rstudio/download/).",
        "4. **Install RStudio:**\n   - Locate the downloaded `.dmg` file and double-click to install."
     ]
     st.markdown('\n'.join(installation_steps))

     # Set up R environment
     st.markdown("## Set Up R Environment")
     environment_steps = [
        "1. **Open RStudio:**\n   - Open the RStudio application from your Applications folder.",
        "2. **Check R Version:**\n   - In the RStudio console, type:\n   ```R\n   sessionInfo()\n   ```"
     ]
     st.markdown('\n'.join(environment_steps))

     # Add R path to environment variables
     st.markdown("## Add R Path to Environment Variables")
     path_steps = [
        "1. **Open Terminal:**\n   - Open the Terminal application on your Mac.",
        "2. **Edit the Shell Profile:**\n   - Depending on your shell, edit the corresponding profile file.\n   ```bash\n   nano ~/.bash_profile\n   ```",
        "3. **Add R Path:**\n   - Add the following line to the profile file:\n   ```bash\n   export PATH=\"/path/to/R/bin:$PATH\"\n   ```",
        "4. **Save and Exit:**\n   - Press `Ctrl + X` to exit, press `Y` to confirm changes, and press `Enter` to save.",
        "5. **Load the Updated Profile:**\n   ```bash\n   source ~/.bash_profile\n   ```"
     ]
     st.markdown('\n'.join(path_steps))
     st.title("GRB_RSE_webapp")

     # Step 1: Download Code
     st.header("Step 1: Download Code")
     st.write("Visit the GitHub repository: [https://github.com/oelsherif/GRB_RSE_webapp](https://github.com/oelsherif/GRB_RSE_webapp).")
     st.write("Click on the 'Code' button and download the ZIP file.")
     st.write("Unzip the downloaded file to your desired location.")

     # Step 2: Open R Studio
     st.header("Step 2: Open R Studio")
     st.write("Open R Studio.")
     st.write("Create a new R Project by going to `File -> New Project -> Existing Directory` and selecting the directory where you unzipped the code.")

     # Step 3: Load Imports
     st.header("Step 3: Load Imports")
     st.write("In R Studio, open the file `Load_Imports.R` located in the project directory.")
     st.write("Save and run the script.")

     # Step 4: Configure Standalone Superlearner
     st.header("Step 4: Configure Standalone Superlearner")
     st.write("Open `new_standalone_superlearner.R`.")
     st.write("Change the `run_locally` variable to `TRUE`.")
     st.write("Save and run the script.")

     # Step 5: Run Result Plot Maker
     st.header("Step 5: Run Result Plot Maker")
     st.write("Open `Result_plot_maker.R`.")
     st.write("Save and run the script.")

     # Step 6: Configure Redshift Estimator
     st.header("Step 6: Configure Redshift Estimator")
     st.write("Open `redshift_estimator.R`.")
     st.write("Change the `run_locally` variable to `TRUE`.")
     st.write("Save and run the script.")

     # Step 7: Reset Configurations
     st.header("Step 7: Reset Configurations")
     st.write("Go back to `new_standalone_superlearner.R` and `redshift_estimator.R`.")
     st.write("Change the `run_locally` variables to `FALSE`.")
     st.write("Save both scripts.")

     # Step 8: Open VS Code
     st.header("Step 8: Open VS Code")
     st.write("Open Visual Studio Code.")

     # Step 9: Run Web Application
     st.header("Step 9: Run Web Application")
     st.write("Open the `app.py` file located in the project directory using VS Code.")
     st.write("In the terminal, navigate to the directory where you saved the unzipped files using the `cd` command.")
     st.write("Run the Streamlit app by typing `streamlit run app.py` in the terminal.")

     # Step 10: Access the Web App
     st.header("Step 10: Access the Web App")
     st.write("Once the app is running, open your web browser and navigate to the provided local address (usually `http://localhost:8501`).")
     st.write("Now you should have the GRB_RSE_webapp running locally on your machine. Feel free to explore the functionalities provided by the application in your web browser. ")
    if task1 == "Linux":
     st.title("Linux Setup Guide")

     st.write("Follow these steps to set up your Python development environment on Linux.")

     # Step 1: Installing Python
     st.subheader("1. Installing Python:")
     st.code("""
     sudo apt-get update
     sudo apt-get install python3
     """)

     # Step 2: Installing Visual Studio Code
     st.subheader("2. Installing Visual Studio Code:")
     st.markdown("Download and install Visual Studio Code by following the instructions on the official website: [Visual Studio Code](https://code.visualstudio.com/).")

     # Step 3: Setting Up Python in VS Code
     st.subheader("3. Setting Up Python in VS Code:")
     st.markdown("a. Open VS Code.\nb. Install the 'Python' extension by Microsoft.\nc. Create a new Python file with a `.py` extension.\nd. Select the Python interpreter by clicking on the interpreter version displayed in the bottom-right corner.")

     # Step 4: Installing Python Libraries
     st.subheader("4. Installing Python Libraries:")
     st.code("""
     pip3 install streamlit
     pip3 install numpy
     pip3 install pandas
     """)

     # Step 5: Adding Python Path to Environment Variables
     st.subheader("5. Adding Python Path to Environment Variables:")
     st.markdown("a. Open the terminal.\nb. Open the shell configuration file. The file name may vary based on your shell. For example, for Bash:")
     st.code("""
     nano ~/.bashrc
     """)
     st.markdown("c. Add the following line to the file, replacing `/path/to/python` with the actual path:")
     st.code("""
     export PATH="/path/to/python:$PATH"
     """)
     st.markdown("d. Save and exit the text editor.\ne. In the terminal, type the following to apply the changes:")
     st.code("""
     source ~/.bashrc
     """)

     # Step 6: Verification
     st.subheader("6. Verification:")
     st.markdown("a. Open a new terminal and type:")
     st.code("""
     python3 --version
     """)
     st.markdown("b. Ensure that the installed libraries are accessible:")
     st.code("""
     pip3 show streamlit
     pip3 show numpy
     pip3 show pandas
     """)
     st.title("R and RStudio Installation Guide for Linux")

     # Install R and RStudio
     st.markdown("## Install R and RStudio")
     installation_steps = [
        "1. **Install R:**",
        "   - Open a terminal and run the following commands:",
        "   ```bash",
        "   sudo apt update",
        "   sudo apt install r-base",
        "   ```",
        "2. **Install RStudio:**",
        "   - Download the RStudio .deb package from [RStudio Download](https://www.rstudio.com/products/rstudio/download/).",
        "   - Open a terminal and navigate to the directory containing the downloaded file.",
        "   - Run the following command:",
        "   ```bash",
        "   sudo dpkg -i rstudio-x.yy.zzz-amd64.deb",
        "   sudo apt install -f",
        "   ```"
     ]
     st.markdown('\n'.join(installation_steps))

     # Set up R environment
     st.markdown("## Set Up R Environment")
     environment_steps = [
        "1. **Open RStudio:**",
        "   - Open the RStudio application from your applications menu.",
        "2. **Check R Version:**",
        "   - In the RStudio console, type:",
        "   ```R",
        "   sessionInfo()",
        "   ```"
     ]
     st.markdown('\n'.join(environment_steps))

     # Add R path to environment variables
     st.markdown("## Add R Path to Environment Variables")
     path_steps = [
        "1. **Open Terminal:**",
        "   - Open a terminal on your Linux machine.",
        "2. **Edit the Shell Profile:**",
        "   - Depending on your shell (bash, zsh, etc.), edit the corresponding profile file.",
        "   ```bash",
        "   nano ~/.bashrc",
        "   ```",
        "3. **Add R Path:**",
        "   - Add the following line to the profile file:",
        "   ```bash",
        "   export PATH=\"/usr/lib/R/bin:$PATH\"",
        "   ```",
        "4. **Save and Exit:**",
        "   - Press `Ctrl + X` to exit, press `Y` to confirm changes, and press `Enter` to save.",
        "5. **Load the Updated Profile:**",
        "   ```bash",
        "   source ~/.bashrc",
        "   ```"
     ]
     st.markdown('\n'.join(path_steps))   
     st.title("GRB_RSE_webapp")

     # Step 1: Download Code
     st.header("Step 1: Download Code")
     st.write("Visit the GitHub repository: [https://github.com/oelsherif/GRB_RSE_webapp](https://github.com/oelsherif/GRB_RSE_webapp).")
     st.write("Click on the 'Code' button and download the ZIP file.")
     st.write("Unzip the downloaded file to your desired location.")

     # Step 2: Open R Studio
     st.header("Step 2: Open R Studio")
     st.write("Open R Studio.")
     st.write("Create a new R Project by going to `File -> New Project -> Existing Directory` and selecting the directory where you unzipped the code.")

     # Step 3: Load Imports
     st.header("Step 3: Load Imports")
     st.write("In R Studio, open the file `Load_Imports.R` located in the project directory.")
     st.write("Save and run the script.")

     # Step 4: Configure Standalone Superlearner
     st.header("Step 4: Configure Standalone Superlearner")
     st.write("Open `new_standalone_superlearner.R`.")
     st.write("Change the `run_locally` variable to `TRUE`.")
     st.write("Save and run the script.")

     # Step 5: Run Result Plot Maker
     st.header("Step 5: Run Result Plot Maker")
     st.write("Open `Result_plot_maker.R`.")
     st.write("Save and run the script.")

     # Step 6: Configure Redshift Estimator
     st.header("Step 6: Configure Redshift Estimator")
     st.write("Open `redshift_estimator.R`.")
     st.write("Change the `run_locally` variable to `TRUE`.")
     st.write("Save and run the script.")

     # Step 7: Reset Configurations
     st.header("Step 7: Reset Configurations")
     st.write("Go back to `new_standalone_superlearner.R` and `redshift_estimator.R`.")
     st.write("Change the `run_locally` variables to `FALSE`.")
     st.write("Save both scripts.")

     # Step 8: Open VS Code
     st.header("Step 8: Open VS Code")
     st.write("Open Visual Studio Code.")

     # Step 9: Run Web Application
     st.header("Step 9: Run Web Application")
     st.write("Open the `app.py` file located in the project directory using VS Code.")
     st.write("In the terminal, navigate to the directory where you saved the unzipped files using the `cd` command.")
     st.write("Run the Streamlit app by typing `streamlit run app.py` in the terminal.")

     # Step 10: Access the Web App
     st.header("Step 10: Access the Web App")
     st.write("Once the app is running, open your web browser and navigate to the provided local address (usually `http://localhost:8501`).")
     st.write("Now you should have the GRB_RSE_webapp running locally on your machine. Feel free to explore the functionalities provided by the application in your web browser. ")
    