# logMAD[j]<-CVmetrics[2]
# logNMAD[j]<-CVmetrics[3]
# logrms[j]<-CVmetrics[4]
# CVLinearmetrics <- metrics(TrainingData$Redshift_crosscheck, 10^CVmodel[[j]][[3]] - z_e, linear = TRUE, print = FALSE) #*
#
# linearBias[j]<- CVLinearmetrics[1]
# linearMAD[j]<- CVLinearmetrics[2]
# linearNMAD[j]<- CVLinearmetrics[3]
# linearrms[j]<- CVLinearmetrics[4]
}
#plot(Response, rowMeans(preds) )
png(filename = paste(PLOTaddr,'model_compare_plot.png'),res=500,width=3000,height=3000)
par(mar=c(5, 10, 4, 2))
barplot(sort(colMeans(co)), names.arg = libs[order(colMeans(co))], horiz = T, las=1,)
dev.off()
barplot(colMeans(co), names.arg = libs, horiz = T, las=1,)
par(mar=c(5, 4, 4, 2))
{ # THIS PLOTS ALL THE GRBS CORRELATION PLOT
#plotnames<-paste(libnames,length(libs),"algo_",ncol(Predictors),"vrb_",loop,"times",sep = "")
plotnames<- "correlation_plot"
plotnames<-paste('_with_catOutl_',plotnames,sep='')
results<-result_plotter(rownames(TrainingData),rowMeans(preds),Response
,apply(preds,1,max),apply(preds,1,min)) # HERE THE MAX MIN PREDICTIONS ARE DETERMINED
}
InsideCone <- read.csv(paste(addr,'Results_wo_catout',plotnames,'.csv',sep = ''),row.names = 1)
rownames(InsideCone)
{ # THIS PRINTS THE CORRELATION PLOT FOR DATA INSIDE 2SIGMA
#plotnames<-paste(libnames,length(libs),"algo_",ncol(Predictors),"vrb_",loop,"times",sep = "")
plotnames<- "correlation_plot"
plotnames<-paste('_without_catOutl_',plotnames,sep='')
Good_results <-  result_plotter(rownames(InsideCone),InsideCone$InvZphot,InsideCone$InvZspec
,InsideCone$pred_max,InsideCone$pred_min)
}
#go
Predictors
colnames(Predictors)
source("Load_Imports.R")
#Old_data = read.csv("SORTED_FINAL_X-Ray_DATA.csv",header = T,row.names = 1)
#dim(Old_data)
run_locally = T#Set to true for debugging.
if(run_locally){
New_data = read.csv("combined_data_with_redshift_v8.csv",header = T,row.names = 1)
training_set = T
} else {
args <- commandArgs(trailingOnly = TRUE)
input_file <- args[1]
New_data = read.csv(input_file, header = TRUE, row.names = 1)
training_set <- as.logical(tolower(args[2]) == "true")
}
addr <-paste("Results/") #THIS HOLDS THE ADDRESS AT WHICH THE FILES ARE OUTPUT
PLOTaddr <-paste("Plot_Output/") #THIS HOLDS THE ADDRESS AT WHICH THE PLOTS ARE OUTPUT
## CREATE DIRECTORIES IF THEY DONT EXIST
if(!dir.exists(PLOTaddr)){dir.create(PLOTaddr)}
if(!dir.exists(addr)){dir.create(addr)}
group<-NA
#group[row.names(Old_data)]<-1
group[row.names(New_data)]<-2
Totdata = rbind(New_data)
Totdata = Totdata[ Totdata$T90 > 2,]
Totdata$T90 = log10(Totdata$T90)
Totdata = Totdata[Totdata$log10NH > 20,]
Totdata = Totdata[Totdata$Alpha < 3,]
Totdata = Totdata[Totdata$Beta < 3,]
Totdata = Totdata[Totdata$Gamma < 3,]
dim(New_data[New_data$Redshift_crosscheck > 3,])
library(ggplot2)
library(GGally)
library(ggpubr)
if(training_set){
col_names=c('z', 'log(T90)', 'log(Fluence)', 'log(Peak)', 'Photon Index','log(NH)', 'Gamma', 'log(Fa)', 'log(Ta)', 'α',  'β' )
}else{
col_names=c('log(T90)', 'log(Fluence)', 'log(Peak)', 'Photon Index','log(NH)', 'Gamma', 'log(Fa)', 'log(Ta)', 'α',  'β' )
}
#Totdata = read.csv("Training_data_MICE_w_NH&Peak_imputed.csv",header = T,row.names = 1)
filename = paste(PLOTaddr,'NewScatterPlot.png',sep = '')
png(file = filename, width = 1500, height = 1500, res = 125)
ggpairs(
Totdata[, c(1:11)],
axisLabels = "show",
columnLabels = col_names,
upper = list(continuous = GGally::wrap("cor", method = "pearson", stars = FALSE, size = 4, col = 'blue')),
diag = list(continuous = wrap("barDiag", bins = 10, fill = 'red', col = 'black')),
lower = list(
continuous = GGally::wrap("points", alpha = 0.6, size = 1, col = 'black')  # Set color for all points to black
)
) +
theme_bw() +
theme(
panel.background = element_rect(colour = 'white'),
panel.grid = element_blank(),
axis.text = element_text(colour = 'black'),
strip.text = ggplot2::element_text(size = 11, face = "bold")
)
dev.off()
source('Load_Imports.R')
run_locally = T  #Set to true for debugging.
if(run_locally){
raw_xray_data <- read.csv("combined_data_with_redshift.csv", header = T, row.names = 1)
do_mice = T
do_m_estimator = T
custom_models = F
weight_threshold = 0.5
loop = 100
} else {
args <- commandArgs(trailingOnly = TRUE)
input_file <- args[1]
do_mice <- as.logical(tolower(args[2]) == "true")
do_m_estimator <- as.logical(tolower(args[3]) == "true")
custom_models <- as.logical(tolower(args[4]) == "true")
weight_threshold <- as.numeric(args[5])
loop <- as.numeric(args[6])
raw_xray_data <- read.csv(input_file, header = TRUE, row.names = 1)
}
SqrTermGen <- function(inputData) {
indVar <- colnames(inputData)
for (i in 1:length(indVar)) { # Loop over all variables in indVar
for (j in i:(length(indVar))) { # Loop over all variables at index i and greater than index i
# If i and j correspond to the same varaible call the variable varSqr
if (indVar[i] == indVar[j]) {
inputData[[paste(indVar[i], "Sqr", sep = "")]] <- inputData[, indVar[i]] * inputData[, indVar[j]]
} # else{
# inputData[[paste(indVar[i],indVar[j],sep="")]] <- inputData[,indVar[i]]*inputData[,indVar[j]]
# }
}
}
return(inputData)
}
sz<-0.8
rez=120
addr <-paste("Results/") #THIS HOLDS THE ADDRESS AT WHICH THE FILES ARE OUTPUT
PLOTaddr <-paste("Plot_Output/") #THIS HOLDS THE ADDRESS AT WHICH THE PLOTS ARE OUTPUT
## CREATE DIRECTORIES IF THEY DONT EXIST
if(!dir.exists(PLOTaddr)){dir.create(PLOTaddr)}
if(!dir.exists(addr)){dir.create(addr)}
# Pick out Long GRBs
raw_xray_data = raw_xray_data[raw_xray_data$T90 > 2,]
raw_xray_data$log10T90 = log10(raw_xray_data$T90)
# creating new subset for only numeric features that are not tied to the response (Redshift_crosscheck)
features_for_mice_preds = subset(raw_xray_data,select = c(log10T90,
log10Fa,
log10Ta,
Alpha,
Beta,
Gamma,
log10Fluence,
PhotonIndex,
log10NH,
log10PeakFlux))
features_for_mice_errs = subset(raw_xray_data,select = c(T90Err,
log10FaErr,
log10TaErr,
AlphaErr,
BetaErr,
FluenceErr,
PhotonIndexErr,
PeakFluxErr))
colnames(raw_xray_data)
# replacing inf in log10PeakFlux feature with NAs
features_for_mice_preds$log10PeakFlux[is.infinite(features_for_mice_preds$log10PeakFlux)] <- NA
# removing all log10NH values lower than 20
features_for_mice_preds$log10NH[features_for_mice_preds$log10NH < 20] <- NA
features_for_mice_preds$Beta[features_for_mice_preds$Beta > 3] <- NA
features_for_mice_preds$Gamma[features_for_mice_preds$Gamma > 3] <- NA
features_for_mice_preds$Alpha[features_for_mice_preds$Alpha > 3] <- NA
features_for_mice_preds$PhotonIndex[features_for_mice_preds$PhotonIndex < 0] <- NA
do_mice = T
inf_names <- c(
"log10Fa" = "log(Fa)",
"log10Ta" = "log(Ta)",
"Alpha" = "α",
"Beta"  = "β",
"PhotonIndex" = "Photon Index",
"log10NH" = "log(NH)",
"log10PeakFlux" = "log(Peak flux)",
"log10T90" = expression("log(T90)"),
"log10Fluence" = expression("log( Fluence )"),
"Gamma" = "γ",
"log10FaSqr"  = expression("log(Fa)"^2),
"log10TaSqr" = expression("log(Ta)"^2),
"AlphaSqr"  = expression("α"^2),
"BetaSqr"   = expression("β"^2),
"PhotonIndexSqr"=expression("Photon Index"^2),
"log10NHSqr"  = expression("log(NH)"^2),
"log10PeakFluxSqr" = expression("log(Peak flux)"^2),
"log10T90Sqr" = expression("log(T90)"^2),
"GammaSqr" = expression("γ"^2)
)
features_for_mice_preds
mice_names=features_for_mice_preds
mice_names <- mice_names %>%
rename(
`log(Fa)` = log10Fa,
`log(Ta)` = log10Ta,
`α` = Alpha,
`β` = Beta,
`Photon Index` = PhotonIndex,
`log(NH)` = log10NH,
`log(Peak flux)` = log10PeakFlux,
`log(T90)` = log10T90,
`log( Fluence )` = log10Fluence,
`γ` = Gamma,
`log(Fa)^2` = log10FaSqr,
`log(Ta)^2` = log10TaSqr,
`α^2` = AlphaSqr,
`β^2` = BetaSqr,
`Photon Index^2` = PhotonIndexSqr,
`log(NH)^2` = log10NHSqr,
`log(Peak flux)^2` = log10PeakFluxSqr,
`log(T90)^2` = log10T90Sqr,
`γ^2` = GammaSqr
)
mice_names <- mice_names %>%
rename(
`log(Fa)` = log10Fa,
`log(Ta)` = log10Ta,
`α` = Alpha,
`β` = Beta,
`Photon Index` = PhotonIndex,
`log(NH)` = log10NH,
`log(Peak flux)` = log10PeakFlux,
`log(T90)` = log10T90,
`log( Fluence )` = log10Fluence,
`γ` = Gamma,
`log(Ta)^2` = log10TaSqr,
`α^2` = AlphaSqr,
`β^2` = BetaSqr,
`Photon Index^2` = PhotonIndexSqr,
`log(NH)^2` = log10NHSqr,
`log(Peak flux)^2` = log10PeakFluxSqr,
`log(T90)^2` = log10T90Sqr,
`γ^2` = GammaSqr
)
mice_names=features_for_mice_preds
mice_names <- mice_names %>%
rename(
`log(Fa)` = log10Fa,
`log(Ta)` = log10Ta,
`α` = Alpha,
`β` = Beta,
`Photon Index` = PhotonIndex,
`log(NH)` = log10NH,
`log(Peak flux)` = log10PeakFlux,
`log(T90)` = log10T90,
`log( Fluence )` = log10Fluence,
`γ` = Gamma,
)
if(do_mice){
set.seed(1)
png(filename = paste(PLOTaddr,'MICE_missing_features.png',sep = ''),width = 1000, height = 1000, res = 200)
md.pattern(mice_names,rotate.names = T)
dev.off()
# features_for_mice_all <- cbind(features_for_mice_preds, features_for_mice_errs)
mice_model_preds <- mice(data = features_for_mice_preds,
m = 20,
method = 'midastouch',
printFlag = F)
features_for_mice_preds <- complete(mice_model_preds,20)
mice_model_errs <- mice(data = features_for_mice_errs,
m = 20,
method = 'midastouch',
printFlag = F)
features_for_mice_errs <- complete(mice_model_errs,20)
GRBPred <- cbind(features_for_mice_preds, features_for_mice_errs)
# GRBPred<-complete(mice_model,20)
} else {
#NEEDS TO BE EXPANDED IF NO MICE
#na.omit(features_for_mice_preds)
#na.omit(features_for_mice_errs)
#GRBPred <- rs_data_preds
GRBPred <- na.omit(cbind(features_for_mice_preds, features_for_mice_errs))
}
mice_names
mice_names=features_for_mice_preds
mice_names <- mice_names %>%
rename(
`log(Fa)` = log10Fa,
`log(Ta)` = log10Ta,
`α` = Alpha,
`β` = Beta,
`Photon Index` = PhotonIndex,
`log(NH)` = log10NH,
`log(Peak flux)` = log10PeakFlux,
`log(T90)` = log10T90,
`log( Fluence )` = log10Fluence,
`γ` = Gamma,
)
if(do_mice){
set.seed(1)
png(filename = paste(PLOTaddr,'MICE_missing_features.png',sep = ''),width = 1000, height = 1000, res = 200)
md.pattern(mice_names,rotate.names = T)
dev.off()
# features_for_mice_all <- cbind(features_for_mice_preds, features_for_mice_errs)
mice_model_preds <- mice(data = features_for_mice_preds,
m = 20,
method = 'midastouch',
printFlag = F)
features_for_mice_preds <- complete(mice_model_preds,20)
mice_model_errs <- mice(data = features_for_mice_errs,
m = 20,
method = 'midastouch',
printFlag = F)
features_for_mice_errs <- complete(mice_model_errs,20)
GRBPred <- cbind(features_for_mice_preds, features_for_mice_errs)
# GRBPred<-complete(mice_model,20)
} else {
#NEEDS TO BE EXPANDED IF NO MICE
#na.omit(features_for_mice_preds)
#na.omit(features_for_mice_errs)
#GRBPred <- rs_data_preds
GRBPred <- na.omit(cbind(features_for_mice_preds, features_for_mice_errs))
}
features_for_mice_preds
source("Load_Imports.R")
#Old_data = read.csv("SORTED_FINAL_X-Ray_DATA.csv",header = T,row.names = 1)
#dim(Old_data)
run_locally = F#Set to true for debugging.
if(run_locally){
New_data = read.csv("combined_data_with_redshift_v8.csv",header = T,row.names = 1)
training_set = T
} else {
args <- commandArgs(trailingOnly = TRUE)
input_file <- args[1]
New_data = read.csv(input_file, header = TRUE, row.names = 1)
training_set <- as.logical(tolower(args[2]) == "true")
}
source("Load_Imports.R")
#Old_data = read.csv("SORTED_FINAL_X-Ray_DATA.csv",header = T,row.names = 1)
#dim(Old_data)
run_locally = T#Set to true for debugging.
if(run_locally){
New_data = read.csv("combined_data_with_redshift_v8.csv",header = T,row.names = 1)
training_set = T
} else {
args <- commandArgs(trailingOnly = TRUE)
input_file <- args[1]
New_data = read.csv(input_file, header = TRUE, row.names = 1)
training_set <- as.logical(tolower(args[2]) == "true")
}
addr <-paste("Results/") #THIS HOLDS THE ADDRESS AT WHICH THE FILES ARE OUTPUT
PLOTaddr <-paste("Plot_Output/") #THIS HOLDS THE ADDRESS AT WHICH THE PLOTS ARE OUTPUT
## CREATE DIRECTORIES IF THEY DONT EXIST
if(!dir.exists(PLOTaddr)){dir.create(PLOTaddr)}
if(!dir.exists(addr)){dir.create(addr)}
#Old_data = New_data[rownames(Old_data),]
#New_data = New_data[!(rownames(New_data)%in%rownames(Old_data)),]
group<-NA
#group[row.names(Old_data)]<-1
group[row.names(New_data)]<-2
#dim(group)
#gro
#dim(group)
#group
#Totdata<-GRBPred
#plotnames<-paste(ncol(Totdata),'vars-',nrow(Totdata),'data','_','AllCat',sep = '')
Totdata = rbind(New_data)
#Totdata[row.names(Totdata)=="091127A",]
#Totdata_2=Totdata[row.names(Totdata)!="091127A",]
Totdata = Totdata[ Totdata$T90 > 2,]
Totdata$T90 = log10(Totdata$T90)
#Totdata = Totdata[Totdata$T90 > log10(2),]
Totdata = Totdata[Totdata$log10NH > 20,]
Totdata = Totdata[Totdata$Alpha < 3,]
Totdata = Totdata[Totdata$Beta < 3,]
Totdata = Totdata[Totdata$Gamma < 3,]
#filename = paste(PLOTaddr,'FullScatterPlot-.png',sep = '')
# {
#   # Scatter Plot Section
#   png(file = filename, width = 1500, height = 1500, res = 120)
#   pairs(
#     as.matrix(Totdata[, c(1:11)]),
#     horOdd = T,
#     pch = 3,
#     col = c('black', 'red')[group],  # Black for old data, Red for new data
#     cex = 0.5,
#     cex.labels = 1.4,
#     main = paste('Scatter Plot of', dim(Totdata)[1], ' samples')
#   )
#   dev.off()
#
#   #par(mar=c(10,10,10,10))
# }
# Histogram Section
#hist(Old_data$Redshift_crosscheck, col = 'black', freq = F, main = "Redshift Distribution", xlab = "Redshift", ylab = "Density")
#hist(New_data$Redshift_crosscheck, col = 'red', add = TRUE, freq = F)
#legend("topright", legend = c("Old Data", "New Data"), fill = c("black", "red"))
dim(New_data[New_data$Redshift_crosscheck > 3,])
#dim(Old_data[Old_data$Redshift_crosscheck > 3,])
########## GOOD PAIRS PLOT ##########
library(ggplot2)
library(GGally)
library(ggpubr)
if(training_set){
col_names=c('z', 'log(T90)', 'log(Fluence)', 'log(Peak)', 'Photon Index','log(NH)', 'Gamma', 'log(Fa)', 'log(Ta)', 'α',  'β' )
}else{
col_names=c('log(T90)', 'log(Fluence)', 'log(Peak)', 'Photon Index','log(NH)', 'Gamma', 'log(Fa)', 'log(Ta)', 'α',  'β' )
}
#Totdata = read.csv("Training_data_MICE_w_NH&Peak_imputed.csv",header = T,row.names = 1)
filename = paste(PLOTaddr,'NewScatterPlot.png',sep = '')
png(file = filename, width = 1500, height = 1500, res = 125)
#Redshift_crosscheck	T90	log10Fluence	log10PeakFlux	PhotonIndex	log10NH	Gamma	log10Fa	log10Ta	Alpha	Beta
ggpairs(
Totdata[, c(1:11)],
axisLabels = "show",
columnLabels = col_names,
upper = list(continuous = GGally::wrap("cor", method = "pearson", stars = FALSE, size = 4, col = 'blue')),
diag = list(continuous = wrap("barDiag", bins = 10, fill = 'red', col = 'black')),
lower = list(
continuous = GGally::wrap("points", alpha = 0.6, size = 1, col = 'black')  # Set color for all points to black
)
) +
theme_bw() +
theme(
panel.background = element_rect(colour = 'white'),
panel.grid = element_blank(),
axis.text = element_text(colour = 'black'),
strip.text = ggplot2::element_text(size = 11, face = "bold")
)
dev.off()
source("Load_Imports.R")
#Old_data = read.csv("SORTED_FINAL_X-Ray_DATA.csv",header = T,row.names = 1)
#dim(Old_data)
run_locally = T#Set to true for debugging.
if(run_locally){
New_data = read.csv("combined_data_with_redshift_v8.csv",header = T,row.names = 1)
training_set = T
} else {
args <- commandArgs(trailingOnly = TRUE)
input_file <- args[1]
New_data = read.csv(input_file, header = TRUE, row.names = 1)
training_set <- as.logical(tolower(args[2]) == "true")
}
addr <-paste("Results/") #THIS HOLDS THE ADDRESS AT WHICH THE FILES ARE OUTPUT
PLOTaddr <-paste("Plot_Output/") #THIS HOLDS THE ADDRESS AT WHICH THE PLOTS ARE OUTPUT
## CREATE DIRECTORIES IF THEY DONT EXIST
if(!dir.exists(PLOTaddr)){dir.create(PLOTaddr)}
if(!dir.exists(addr)){dir.create(addr)}
#Old_data = New_data[rownames(Old_data),]
#New_data = New_data[!(rownames(New_data)%in%rownames(Old_data)),]
group<-NA
#group[row.names(Old_data)]<-1
group[row.names(New_data)]<-2
#dim(group)
#gro
#dim(group)
#group
#Totdata<-GRBPred
#plotnames<-paste(ncol(Totdata),'vars-',nrow(Totdata),'data','_','AllCat',sep = '')
Totdata = rbind(New_data)
#Totdata[row.names(Totdata)=="091127A",]
#Totdata_2=Totdata[row.names(Totdata)!="091127A",]
Totdata = Totdata[ Totdata$T90 > 2,]
Totdata$T90 = log10(Totdata$T90)
#Totdata = Totdata[Totdata$T90 > log10(2),]
Totdata = Totdata[Totdata$log10NH > 20,]
Totdata = Totdata[Totdata$Alpha < 3,]
Totdata = Totdata[Totdata$Beta < 3,]
Totdata = Totdata[Totdata$Gamma < 3,]
#filename = paste(PLOTaddr,'FullScatterPlot-.png',sep = '')
# {
#   # Scatter Plot Section
#   png(file = filename, width = 1500, height = 1500, res = 120)
#   pairs(
#     as.matrix(Totdata[, c(1:11)]),
#     horOdd = T,
#     pch = 3,
#     col = c('black', 'red')[group],  # Black for old data, Red for new data
#     cex = 0.5,
#     cex.labels = 1.4,
#     main = paste('Scatter Plot of', dim(Totdata)[1], ' samples')
#   )
#   dev.off()
#
#   #par(mar=c(10,10,10,10))
# }
# Histogram Section
#hist(Old_data$Redshift_crosscheck, col = 'black', freq = F, main = "Redshift Distribution", xlab = "Redshift", ylab = "Density")
#hist(New_data$Redshift_crosscheck, col = 'red', add = TRUE, freq = F)
#legend("topright", legend = c("Old Data", "New Data"), fill = c("black", "red"))
dim(New_data[New_data$Redshift_crosscheck > 3,])
#dim(Old_data[Old_data$Redshift_crosscheck > 3,])
########## GOOD PAIRS PLOT ##########
library(ggplot2)
library(GGally)
library(ggpubr)
if(training_set){
col_names=c('z', 'log(T90)', 'log(Fluence)', 'log(Peak)', 'Photon Index','log(NH)', 'Gamma', 'log(Fa)', 'log(Ta)', 'α',  'β' )
}else{
col_names=c('log(T90)', 'log(Fluence)', 'log(Peak)', 'Photon Index','log(NH)', 'Gamma', 'log(Fa)', 'log(Ta)', 'α',  'β' )
}
#Totdata = read.csv("Training_data_MICE_w_NH&Peak_imputed.csv",header = T,row.names = 1)
filename = paste(PLOTaddr,'NewScatterPlot.png',sep = '')
png(file = filename, width = 1500, height = 1500, res = 125)
#Redshift_crosscheck	T90	log10Fluence	log10PeakFlux	PhotonIndex	log10NH	Gamma	log10Fa	log10Ta	Alpha	Beta
ggpairs(
Totdata[, c(1:11)],
axisLabels = "show",
columnLabels = col_names,
upper = list(continuous = GGally::wrap("cor", method = "pearson", stars = FALSE, size = 4, col = 'blue')),
diag = list(continuous = wrap("barDiag", bins = 10, fill = 'red', col = 'black')),
lower = list(
continuous = GGally::wrap("points", alpha = 0.6, size = 1, col = 'black')  # Set color for all points to black
)
) +
theme_bw() +
theme(
panel.background = element_rect(colour = 'white'),
panel.grid = element_blank(),
axis.text = element_text(colour = 'black'),
strip.text = ggplot2::element_text(size = 11, face = "bold")
)
dev.off()
mice_names
